
.circle {
    background:                     red;
    position:                       relative;

    /* = onderstaande nodig als je left/top gebruikt voor je bewegingen in plaats van transforms */
    width:                          100px;
    height:                         100px;
    border-radius:                  50%;

    /* hieronder geven we aan welke animatie moet afspelen voor dit HTML element! */
    animation-name:                 example2;
    animation-duration:             3s;
    animation-direction:            alternate;
    animation-iteration-count:      infinite;
    animation-timing-function:      ease-in-out;
}

.button {
    position:           relative;
    background:         black;
    color:              white;
    padding:            20px 40px;
    font-size:          30px;
    display:            table;
    border-radius:      10px;
    cursor:             pointer;
}

/* Hieronder worden CSS TRANSITIONS
 in plaats van keyframe animations gebruikt.
 Weet je het verschil?
 */

.button:hover {
    transition:             1s ease;
    background:             red;
    animation-duration:     .3s;
    animation-fill-mode:    forwards;
}

/* ---------- DE ANIMATIES! --------------------------------------------------------------- */

/*
 Je kan op twee manier objecten laten bewegen:
 1. met "position:absolute" en "top/left"
 2. met CSS transforms
 methode 2 is beter voor video/rendering performance,
 je videokaart speelt de animaties af in plaats van je
 processor, zodat je vloeiendere animaties krijgt.
 EXAMPLE1 gebruikt "positioning" variant en
 EXAMPLE2 gebruikt transforms.
 */

@keyframes example1 {
    0% {
        background-color:       red;
        left:                   0px;
        top:                    0px;
    }
    25% {
        background-color:       purple;
        left:                   300px;
        top:                    0px;
    }
    50% {
        background-color:       blue;
        left:                   300px;
        top:                    200px;
    }
    75% {
        background-color:       green;
        left:                   0px;
        top:                    200px;
    }
    100% {
        background-color:       red;
        left:                   0px;
        top:                    0px;
    }
}

@keyframes example2 {
    0% {
        background-color:       red;
        transform:              translateX(0px) translateY(0px);
    }
    25% {
        background-color:       purple;
        transform:              translateX(300px) translateY(0px);
    }
    50% {
        background-color:       black;
        transform:              translateX(300px) translateY(200px) scaleX(2) scaleY(2);
        opacity:                1;
    }
    75% {
        background-color:       green;
        transform:              translateX(0px) translateY(200px);
        opacity:                0;
    }
    100% {
        background-color:       red;
        transform:              translateX(0px) translateY(0px);
        opacity:                1;
    }
}

/* Je kan standaard CSS transitions gebruiken om mouseover animaties automatisch te laten plaatsvinden. Maar je kan ook keyframe CSS animaties maken, zodat je complexere animaties voor je mouseovers kan bedenken!! Testje: vervang voor de zwarte button de simpele :HOVER animatie met de KEYFRAME animaties hieronder! */

@keyframes out {
    from {
        transform:      rotate(200deg);
        background:     orange;
    }
    to {
        transform:      rotate(0deg);
    }
}

@keyframes over {
    0% {
        transform:      rotate(0deg);
    }
    100% {
        transform:      rotate(200deg);
        background:     orange;
    }
}

/* ------------------------------------
 ANIMATION PROPERTY VALUES CHEATSHEET!!
 ---------------------------------------

 ANIMATION-NAME
 Specifies the name of the keyframe you want to bind to the selector
 keyframename|none|initial|inherit;

 ANIMATION-TIMING-FUNCTION
 Specifies the speed curve of the animation
 linear|ease|ease-in|ease-out|ease-in-out|step-start|step-end|steps(int,start|end)|cubic-bezier(n,n,n,n)|initial|inherit;

 ANIMATION-DURATION
 Specifies how many seconds or milliseconds an animation takes to complete
 time|initial|inherit;

 ANIMATION-DIRECTION
 Specifies whether or not the animation should play in reverse on alternate cycles
 normal|reverse|alternate|alternate-reverse|initial|inherit;

 ANIMATION-FILL-MODE
 Specifies what values are applied by the animation outside the time it is executing. for instance, let the animation END and PAUSE at the last keyframe (forwards)
 none|forwards|backwards|both|initial|inherit;

 ANIMATION-ITERATION-COUNT:
 Specifies how many times an animation should be played
 number|infinite|initial|inherit;

 ANIMATION-PLAY-STATE
 Specifies whether the animation is running or paused
 paused|running|initial|inherit;

 */
